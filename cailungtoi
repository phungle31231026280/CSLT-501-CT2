using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfApp1
{
    public class position
    {
        public int Row { get; set; }
        public int Column { get; set; }

        public position (int row, int column)
        {

            Row = row;
            Column = column;
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls.Primitives;

namespace WpfApp1
{
    public abstract class Block
    {
            protected abstract position[][] Tiles { get; }

            protected abstract position StartOffset { get; }

            public abstract int ID { get; }
            private int rotationState;
            private position offset;

            public Block()
            {
                offset = new position(StartOffset.Row, StartOffset.Column);
            }
        public IEnumerable<position> TilesPossition()
        {
            foreach (position p in Tiles[rotationState] )
            {
                yield return new position(p.Row + offset.Row, p.Column + offset.Column);
            }
        }

        public void RotateCW()
        {
            rotationState = (rotationState + 1) % Tiles.Length;
        }

        public void RotateCCW()
        {
            if (rotationState == 0)
            {
                rotationState = (rotationState - 1)
            }
            else
            {
                rotationState--;
            }
        }

        public void Move(int rows, int columns)
        {
            offset.Row += rows;
            offset.Column += columns;
        }
        
        public void Reset()
        {
            rotationState = 0;
            offset.Row = StartOffset.Row;
            offset.Column = StartOffset.Column;
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfApp1
{
    public class IBlock : Block 
    {
        private readonly position[][] tiles = new position[][]
        {
            new position[] {  new position(0, 0), new position(1, 1) , new position(1, 2), new position(1, 3)},
            new position[] {  new position(0, 2), new position(1, 2) , new position(2, 2), new position(3, 2)},
            new position[] {  new position(2, 0), new position(2, 1) , new position(2, 2), new position(2, 3)},
            new position[] {  new position(0, 0), new position(1, 1) , new position(2, 1), new position(3, 1)}
        };

        public override int Id => 1;
        protected override position StartOffset =>  new position(-1, 3);
        protected override position[][] Tiles => tiles;
        

    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfApp1
{
    public class OBlock : Block
    {
        private readonly position[][] tiles = new position[][]
        {
            new position[]
            {  new position(0, 0), new position(0, 1), new position(1, 0), new position(1, 1)}
        };

        public override int Id => 4;
        protected override position StartOffset => new position(0, 4);
        protected override position[][] Tiles => Tiles;

    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfApp1
{
    public class BlockQueue
    {
        private readonly Block[] blocks = new Block[]
        {
            new IBlock(),
            new JBlock(),
            new LBlock(),
            new OBlock(),
            new SBlock(),
            new TBlock(),
            new ZBlock()
        };

        private readonly Random random = new Random();

        public Block NextBlock
        { get; private set; }

        public BlockQueue()
        {
            NextBlock = RandomBlock();
        }

        private Block RandomBlock()
        {
            return blocks[random.Next(blocks.Length)];
        }

        public Block GetAndUpdate()
        {
            Block block = NextBlock;

            do
            {
                NextBlock = RandomBlock();
            }
            while (block.Id == NextBlock.Id);
            return block;
        }

    }
}
